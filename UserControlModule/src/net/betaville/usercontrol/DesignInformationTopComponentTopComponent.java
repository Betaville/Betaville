/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.betaville.usercontrol;

import edu.poly.bxmc.betaville.model.Design;
import java.util.Iterator;
import net.betaville.usercontrol.lookup.CentralLookup;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.betaville.usercontrol//DesignInformationTopComponent//EN",
autostore = false)
@TopComponent.Description(preferredID = "DesignInformationTopComponentTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "net.betaville.usercontrol.DesignInformationTopComponentTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DesignInformationTopComponentAction",
preferredID = "DesignInformationTopComponentTopComponent")
@Messages({
    "CTL_DesignInformationTopComponentAction=DesignInformationTopComponent",
    "CTL_DesignInformationTopComponentTopComponent=DesignInformationTopComponent Window",
    "HINT_DesignInformationTopComponentTopComponent=This is a DesignInformationTopComponent window"
})
public final class DesignInformationTopComponentTopComponent extends TopComponent implements LookupListener{

    private Lookup.Result<Design> result = null;
    
    public DesignInformationTopComponentTopComponent() {
	initComponents();
	setName(Bundle.CTL_DesignInformationTopComponentTopComponent());
	setToolTipText(Bundle.HINT_DesignInformationTopComponentTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        designScrollPanel = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(designScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(designScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane designScrollPanel;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
	result = CentralLookup.getDefault().lookupResult(Design.class);
	result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
	result.removeLookupListener(this);
	result = null;
    }

    void writeProperties(java.util.Properties p) {
	// better to version settings since initial version as advocated at
	// http://wiki.apidesign.org/wiki/PropertyFiles
	p.setProperty("version", "1.0");
	// TODO store your settings
    }

    void readProperties(java.util.Properties p) {
	String version = p.getProperty("version");
	// TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
	System.out.println("Design Selection Event Captured!");
	designScrollPanel.removeAll();
	
	Iterator<? extends Design> it = result.allInstances().iterator();
	while(it.hasNext()){
	    Design design = it.next();
	    DesignInformationPanel dip = new DesignInformationPanel();
	    dip.loadData(design);
	    designScrollPanel.add(dip);
	}
    }
}

/* Copyright (c) 2008-2012, Brooklyn eXperimental Media Center
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Brooklyn eXperimental Media Center nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Brooklyn eXperimental Media Center BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.betaville.usercontrol;

import edu.poly.bxmc.betaville.CentralLookup;
import edu.poly.bxmc.betaville.model.ClientSession;
import edu.poly.bxmc.betaville.model.Comment;
import edu.poly.bxmc.betaville.model.Design;
import edu.poly.bxmc.betaville.net.InsecureClientManager;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Iterator;
import java.util.List;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.betaville.usercontrol//DesignInformationTopComponent//EN",
autostore = false)
@TopComponent.Description(preferredID = "DesignInformationTopComponentTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "net.betaville.usercontrol.DesignInformationTopComponentTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DesignInformationTopComponentAction",
preferredID = "DesignInformationTopComponentTopComponent")
@Messages({
    "CTL_DesignInformationTopComponentAction=Object Information",
    "CTL_DesignInformationTopComponentTopComponent=DesignInformationTopComponent Window",
    "HINT_DesignInformationTopComponentTopComponent=Shows an object's information"
})
public final class ObjectInfoTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<Design> result = null;
    List<Comment> cList;
    StringBuilder appendText;

    public ObjectInfoTopComponent() {
        initComponents();
        setName(Bundle.CTL_DesignInformationTopComponentTopComponent());
        setToolTipText(Bundle.HINT_DesignInformationTopComponentTopComponent());
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PERSISTENCE_ALWAYS, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        descriptionlLabel1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        dateCreatedLabel = new javax.swing.JLabel();
        dateCreatedTextfield = new javax.swing.JTextField();
        creatorLabel = new javax.swing.JLabel();
        creatorTextfield = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        addressTextfield = new javax.swing.JTextField();
        urlLabel1 = new javax.swing.JLabel();
        urlTextfield = new javax.swing.JTextField();
        descriptionlLabel = new javax.swing.JLabel();
        updateDescriptionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayText = new javax.swing.JEditorPane();
        commentLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        postCommentButton = new javax.swing.JButton();
        addCommentLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setPreferredSize(new java.awt.Dimension(370, 100));

        org.openide.awt.Mnemonics.setLocalizedText(descriptionlLabel1, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.descriptionlLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.nameLabel.text")); // NOI18N

        nameTextField.setText(org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.nameTextField.text")); // NOI18N
        nameTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(dateCreatedLabel, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.dateCreatedLabel.text")); // NOI18N

        dateCreatedTextfield.setText(org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.dateCreatedTextfield.text")); // NOI18N
        dateCreatedTextfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(creatorLabel, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.creatorLabel.text")); // NOI18N

        creatorTextfield.setText(org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.creatorTextfield.text")); // NOI18N
        creatorTextfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(addressLabel, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.addressLabel.text")); // NOI18N

        addressTextfield.setText(org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.addressTextfield.text")); // NOI18N
        addressTextfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(urlLabel1, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.urlLabel1.text")); // NOI18N

        urlTextfield.setText(org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.urlTextfield.text")); // NOI18N
        urlTextfield.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(descriptionlLabel, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.descriptionlLabel.text")); // NOI18N

        updateDescriptionButton.setBackground(new java.awt.Color(153, 153, 0));
        updateDescriptionButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        updateDescriptionButton.setForeground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(updateDescriptionButton, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.updateDescriptionButton.text")); // NOI18N
        updateDescriptionButton.setBorder(null);
        updateDescriptionButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        displayText.setBorder(null);
        displayText.setContentType(org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.displayText.contentType")); // NOI18N
        displayText.setEditable(false);
        jScrollPane1.setViewportView(displayText);

        org.openide.awt.Mnemonics.setLocalizedText(commentLabel, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.commentLabel.text")); // NOI18N

        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(2);
        textArea.setWrapStyleWord(true);
        textArea.setBorder(null);
        jScrollPane2.setViewportView(textArea);

        postCommentButton.setBackground(new java.awt.Color(153, 153, 0));
        postCommentButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        postCommentButton.setForeground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(postCommentButton, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.postCommentButton.text")); // NOI18N
        postCommentButton.setBorder(null);
        postCommentButton.setFocusTraversalPolicyProvider(true);
        postCommentButton.setRequestFocusEnabled(false);
        postCommentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postCommentButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addCommentLabel, org.openide.util.NbBundle.getMessage(ObjectInfoTopComponent.class, "ObjectInfoTopComponent.addCommentLabel.text")); // NOI18N

        jScrollPane3.setHorizontalScrollBar(null);

        descriptionArea.setColumns(20);
        descriptionArea.setRows(2);
        descriptionArea.setWrapStyleWord(true);
        descriptionArea.setBorder(null);
        jScrollPane3.setViewportView(descriptionArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(descriptionlLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(109, 109, 109))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel)
                    .addComponent(commentLabel)
                    .addComponent(addCommentLabel))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(urlLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addressTextfield, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(descriptionlLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(updateDescriptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(postCommentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateCreatedTextfield, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(urlTextfield, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateCreatedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(creatorTextfield, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(creatorLabel)
                        .addGap(134, 134, 134)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(descriptionlLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel)
                .addGap(1, 1, 1)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(dateCreatedLabel)
                .addGap(1, 1, 1)
                .addComponent(dateCreatedTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(creatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(creatorTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(addressLabel)
                .addGap(1, 1, 1)
                .addComponent(addressTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(urlLabel1)
                .addGap(1, 1, 1)
                .addComponent(urlTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(descriptionlLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateDescriptionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(commentLabel)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCommentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postCommentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void postCommentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postCommentButtonActionPerformed
//        String readText, replaceText;
//
//        readText = textArea.getText();
//        textArea.setText("");
//        displayComments(readText);
    }//GEN-LAST:event_postCommentButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addCommentLabel;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField addressTextfield;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JLabel creatorLabel;
    private javax.swing.JTextField creatorTextfield;
    private javax.swing.JLabel dateCreatedLabel;
    private javax.swing.JTextField dateCreatedTextfield;
    private javax.swing.JTextArea descriptionArea;
    private javax.swing.JLabel descriptionlLabel;
    private javax.swing.JLabel descriptionlLabel1;
    private javax.swing.JEditorPane displayText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton postCommentButton;
    private javax.swing.JTextArea textArea;
    private javax.swing.JButton updateDescriptionButton;
    private javax.swing.JLabel urlLabel1;
    private javax.swing.JTextField urlTextfield;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        result = CentralLookup.getDefault().lookupResult(Design.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Design design = CentralLookup.getDefault().lookup(Design.class);
        if (design != null) {
            nameTextField.setText(design.getName());
            dateCreatedTextfield.setText(design.getDateAdded());
            descriptionArea.setText(design.getDescription());
            addressTextfield.setText(design.getAddress());
            urlTextfield.setText(design.getURL());
            creatorTextfield.setText(design.getUser());
        }
        //String replaceText;
        appendText = new StringBuilder("<html><body>");
        //StringBuilder buffer = new StringBuilder();
        if (design != null) {
            try {
                InsecureClientManager icm = new InsecureClientManager(null, CentralLookup.getDefault().lookup(ClientSession.class).getServer());
                cList = icm.getComments(design.getID());
                for (Iterator<Comment> it = cList.iterator(); it.hasNext();) {
                    //Comment commentItem = it.next();
                    //replaceText = it.next().getComment().replaceAll("\n", "<br>");
                    appendText.append("<hr>").append(it.next().getComment().replaceAll("\n", "<br>")).append("<hr>");
                    //buffer.append(it.next().getComment());
                }
                appendText.append("</body></html>");
                displayText.setText(appendText.toString());
                //displayComments(buffer.toString());
                //jTextArea1.setText(buffer.toString());

            } catch (UnknownHostException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }
}

/* Copyright (c) 2008-2012, Brooklyn eXperimental Media Center
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Brooklyn eXperimental Media Center nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Brooklyn eXperimental Media Center BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.betaville.mapviewer.options;

import java.awt.Color;
import javax.swing.JColorChooser;
import javax.swing.colorchooser.AbstractColorChooserPanel;
import org.openide.util.NbPreferences;

final class ColorsPanel extends javax.swing.JPanel {

    private final ColorsOptionsPanelController controller;

    ColorsPanel(ColorsOptionsPanelController controller) {
	this.controller = controller;
	initComponents();
	// TODO listen to changes in form fields and call controller.changed()
	
	removeUnwantedChooserPanels(myLocationColorChooser);
	removeUnwantedChooserPanels(proposalsColorChooser);
	removeUnwantedChooserPanels(wormholesColorChooser);
    }
    
    /**
     * Removes unwanted color choosers from the color chooser panel
     * 
     * @param colorChooser 
     */
    private void removeUnwantedChooserPanels(JColorChooser colorChooser){
	for(int i=0; i<colorChooser.getChooserPanels().length; i++){
	    AbstractColorChooserPanel chooser = colorChooser.getChooserPanels()[i];
	    if(chooser.getClass().getName().contains("Swatch")){
		colorChooser.removeChooserPanel(chooser);
	    }
	    else if(chooser.getClass().getName().contains("HSB")){
		colorChooser.removeChooserPanel(chooser);
	    }
	}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        myLocationColorChooser = new javax.swing.JColorChooser();
        proposalsColorChooser = new javax.swing.JColorChooser();
        wormholesColorChooser = new javax.swing.JColorChooser();

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(ColorsPanel.class, "ColorsPanel.myLocationColorChooser.TabConstraints.tabTitle"), myLocationColorChooser); // NOI18N
        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(ColorsPanel.class, "ColorsPanel.proposalsColorChooser.TabConstraints.tabTitle"), proposalsColorChooser); // NOI18N
        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(ColorsPanel.class, "ColorsPanel.wormholesColorChooser.TabConstraints.tabTitle"), wormholesColorChooser); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
	myLocationColorChooser.setColor(NbPreferences.forModule(ColorsPanel.class).getInt("myLocationColorChooser", Color.red.getRGB()));
	proposalsColorChooser.setColor(NbPreferences.forModule(ColorsPanel.class).getInt("proposalsColorChooser", Color.yellow.getRGB()));
	wormholesColorChooser.setColor(NbPreferences.forModule(ColorsPanel.class).getInt("wormholesColorChooser", Color.green.getRGB()));
    }

    void store() {
	NbPreferences.forModule(ColorsPanel.class).putInt("myLocationColorChooser", myLocationColorChooser.getColor().getRGB());
	NbPreferences.forModule(ColorsPanel.class).putInt("proposalsColorChooser", proposalsColorChooser.getColor().getRGB());
	NbPreferences.forModule(ColorsPanel.class).putInt("wormholesColorChooser", wormholesColorChooser.getColor().getRGB());
    }

    boolean valid() {
	// TODO check whether form is consistent and complete
	return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser myLocationColorChooser;
    private javax.swing.JColorChooser proposalsColorChooser;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JColorChooser wormholesColorChooser;
    // End of variables declaration//GEN-END:variables
}
